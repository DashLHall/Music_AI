from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
from sentence_transformers import SentenceTransformer
from processed_data import process_question

app = Flask(__name__)
CORS(app)

model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')

def init_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS uploads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            processedData TEXT,
            embedding TEXT
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/upload', methods=['POST'])
def upload():
    data = request.get_json()
    question = data.get('question')
    processed_data = process_question(question)  # Use the processing module

    # Generate embedding
    embedding = model.encode([question])[0].tolist()  # Convert to list for JSON serialization

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO uploads (question, processedData, embedding) VALUES (?, ?, ?)", (question, processed_data, str(embedding)))
    conn.commit()
    upload_id = cursor.lastrowid
    conn.close()

    return jsonify({'id': upload_id, 'question': question, 'processedData': processed_data, 'embedding': embedding}), 201

@app.route('/uploads', methods=['GET'])
def get_uploads():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM uploads')
    uploads = cursor.fetchall()
    conn.close()
    return jsonify([{'id': row[0], 'question': row[1], 'processedData': row[2], 'embedding': eval(row[3])} for row in uploads])

if __name__ == '__main__':
    init_db()
    app.run(port=5000, debug=True)

    import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [question, setQuestion] = useState('');
  const [uploads, setUploads] = useState([]);

  useEffect(() => {
    fetchUploads();
  }, []);

  const fetchUploads = async () => {
    try {
      const response = await fetch('http://localhost:5000/uploads');
      const data = await response.json();
      console.log('Fetched uploads:', data);
      setUploads(data);
    } catch (error) {
      console.error('Error fetching uploads:', error);
    }
  };

  const handleQuestionChange = (event) => {
    setQuestion(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = { question };

    try {
      const response = await fetch('http://localhost:5000/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json();
      console.log('Upload result:', result);
      setUploads([...uploads, result]);
      setQuestion('');
    } catch (error) {
      console.error('Error uploading:', error);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Ask a Question About Music</h1>
        <form onSubmit={handleSubmit}>
          <div>
            <label>
              Question:
              <input type="text" value={question} onChange={handleQuestionChange} />
            </label>
          </div>
          <button type="submit">Submit</button>
        </form>

        <h2>Uploaded Questions</h2>
        <ul>
          {uploads.map((upload, index) => (
            <li key={index}>
              <p>Question: {upload.question}</p>
              <p>Processed Data: {upload.processedData}</p>
            </li>
          ))}
        </ul>
      </header>
    </div>
  );
}





















export default App;
import React, { useState, useEffect, useRef } from 'react';
import './App.css';

function App() {
  const [question, setQuestion] = useState('');
  const [uploads, setUploads] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const initialized = useRef(false);

  useEffect(() => {
    if (!initialized.current) {
      console.log('Component mounted, initializing...');
      initialize();
      initialized.current = true;
    }
  }, []);

  const initialize = async () => {
    console.log('Resetting state...');
    // Reset state
    setQuestion('');
    setUploads([]);
    setLoading(true);
    setError(null);

    console.log('State reset. Fetching uploads...');
    await fetchUploads();
  };

  const fetchUploads = async () => {
    try {
      const response = await fetch('http://localhost:5000/uploads');
      const data = await response.json();
      console.log('Fetched uploads:', data);
      setUploads(data);
    } catch (error) {
      console.error('Error fetching uploads:', error);
      setError('Error fetching uploads');
    } finally {
      setLoading(false);
      console.log('Fetching uploads finished, loading state set to false.');
    }
  };

  const handleQuestionChange = (event) => {
    setQuestion(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = { question };

    try {
      const response = await fetch('http://localhost:5000/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json();
      console.log('Upload result:', result);
      setUploads([...uploads, result]);
      setQuestion('');
    } catch (error) {
      console.error('Error uploading:', error);
      setError('Error uploading question');
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Ask a Question About Music</h1>
        <form onSubmit={handleSubmit}>
          <div>
            <label>
              Question:
              <input type="text" value={question} onChange={handleQuestionChange} />
            </label>
          </div>
          <button type="submit">Submit</button>
        </form>

        <h2>Uploaded Questions</h2>
        {loading ? (
          <p>Loading...</p>
        ) : error ? (
          <p>{error}</p>
        ) : uploads.length === 0 ? (
          <p>No uploads yet.</p>
        ) : (
          <ul>
            {uploads.map((upload, index) => (
              <li key={index}>
                <p>Question: {upload.question}</p>
                <p>Processed Data: {upload.processedData}</p>
              </li>
            ))}
          </ul>
        )}
      </header>
    </div>
  );
}

export default App;
